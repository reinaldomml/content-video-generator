#!/usr/bin/env python3
"""
Teste da Etapa 2: Transcri√ß√£o do √°udio

Este script testa a transcri√ß√£o do √°udio usando a API OpenAI Whisper.
Pode usar um arquivo de √°udio existente ou baixar um novo.
"""

import json
import os
import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path para importar main
sys.path.insert(0, str(Path(__file__).parent))

from config import DEFAULT_TEST_URL
from main import YouTubeEbookGenerator


def test_transcription():
    """Testa a transcri√ß√£o do √°udio."""
    print('=' * 60)
    print('TESTE ETAPA 2: TRANSCRI√á√ÉO DO √ÅUDIO')
    print('=' * 60)

    # Verifica se existe um arquivo de v√≠deo info de teste anterior
    video_info_file = Path('output/video_info_test.json')

    try:
        with YouTubeEbookGenerator() as generator:
            if video_info_file.exists():
                print('üìÅ Usando arquivo de v√≠deo existente do teste anterior...')
                with open(video_info_file, 'r', encoding='utf-8') as f:
                    video_info = json.load(f)

                # Verifica se o arquivo de √°udio ainda existe
                audio_path = Path(video_info['audio_path'])
                if not audio_path.exists():
                    print('‚ö†Ô∏è  Arquivo de √°udio n√£o encontrado, baixando novamente...')
                    video_info = generator.download_audio(DEFAULT_TEST_URL)
            else:
                print('üîÑ Baixando √°udio do v√≠deo de teste...')
                video_info = generator.download_audio(DEFAULT_TEST_URL)

            print(f'\nüì∫ V√≠deo: {video_info["title"]}')
            print(f'üë§ Canal: {video_info["uploader"]}')
            print(f'‚è±Ô∏è  Dura√ß√£o: {generator._format_duration(video_info["duration"])}')

            # Estima custo da transcri√ß√£o
            audio_path = Path(video_info['audio_path'])
            file_size_mb = audio_path.stat().st_size / (1024 * 1024)
            estimated_duration_minutes = file_size_mb / 1.5
            estimated_cost = estimated_duration_minutes * 0.006  # Custo do Whisper
            cost_brl = estimated_cost * 5.48

            print('\nüí∞ Custo estimado da transcri√ß√£o:')
            print(f'   ${estimated_cost:.4f} USD (R$ {cost_brl:.2f} BRL)')

            # Confirma se deve prosseguir
            response = input('\n‚ùì Deseja prosseguir com a transcri√ß√£o? (s/N): ').lower()
            if response not in ['s', 'sim', 'y', 'yes']:
                print('‚ùå Transcri√ß√£o cancelada pelo usu√°rio.')
                return False

            print('\nüîÑ Iniciando transcri√ß√£o...')
            transcription = generator.transcribe_audio(video_info['audio_path'])

            print('\n‚úÖ Transcri√ß√£o conclu√≠da com sucesso!')
            print('\nüìä Estat√≠sticas da transcri√ß√£o:')
            print(f'   üìù Caracteres: {len(transcription["text"])}')
            print(f'   üìù Palavras: {len(transcription["text"].split())}')
            print(f'   üéµ Dura√ß√£o: {generator._format_duration(transcription.get("duration", 0))}')
            print(f'   üî§ Palavras com timestamp: {len(transcription.get("words", []))}')

            # Mostra uma amostra do texto
            sample_text = (
                transcription['text'][:200] + '...' if len(transcription['text']) > 200 else transcription['text']
            )
            print('\nüìÑ Amostra do texto transcrito:')
            print(f'   "{sample_text}"')

            # Salva a transcri√ß√£o
            transcription_file = generator.save_transcription(transcription, video_info)
            print(f'\nüíæ Transcri√ß√£o salva em: {transcription_file}')

            # Exibe resumo de custos
            generator.display_cost_summary()

            return True

    except Exception as e:
        print(f'\n‚ùå Erro durante a transcri√ß√£o: {str(e)}')
        return False


def main():
    """Fun√ß√£o principal do teste."""
    # Verifica se a API key est√° configurada
    if not os.getenv('OPENAI_API_KEY'):
        print('‚ùå ERRO: Configure a vari√°vel de ambiente OPENAI_API_KEY')
        print("Exemplo: export OPENAI_API_KEY='sua-api-key-aqui'")
        return 1

    success = test_transcription()

    if success:
        print('\n' + '=' * 60)
        print('‚úÖ TESTE DA ETAPA 2 CONCLU√çDO COM SUCESSO!')
        print('=' * 60)
        return 0
    else:
        print('\n' + '=' * 60)
        print('‚ùå TESTE DA ETAPA 2 FALHOU!')
        print('=' * 60)
        return 1


if __name__ == '__main__':
    sys.exit(main())
